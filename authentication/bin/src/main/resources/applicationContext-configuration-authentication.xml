<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:sec="http://www.springframework.org/schema/security" 
	xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
	xmlns:ldap="http://www.springframework.org/schema/ldap"
	xmlns:util="http://www.springframework.org/schema/util"
	
	xsi:schemaLocation="http://www.springframework.org/schema/security/oauth2 	http://www.springframework.org/schema/security/spring-security-oauth2-2.0.xsd 
						http://www.springframework.org/schema/security 			http://www.springframework.org/schema/security/spring-security-3.2.xsd 
						http://www.springframework.org/schema/beans 			http://www.springframework.org/schema/beans/spring-beans.xsd 
						http://www.springframework.org/schema/context 			http://www.springframework.org/schema/context/spring-context.xsd
						http://www.springframework.org/schema/ldap 				http://www.springframework.org/schema/ldap/spring-ldap.xsd
						http://www.springframework.org/schema/util 				http://www.springframework.org/schema/util/spring-util-4.1.xsd">

	
	<util:properties id="ldapProperties" location="file:ldap.properties" ignore-resource-not-found="false" />
	<!-- <util:properties id="ldapProperties" location="file:C:///workspaces/AfrAsia/git/afrasia-platform/authentication/src/main/java/ldap.properties" ignore-resource-not-found="false" /> -->
	<!-- Create client details bean for manage client details from database 
		.The JdbcClientDetailsService provide default implementation for fetching 
		the data from oauth_client_details table .We have created custom class that 
		Implement ClientDetailsService Interface and override its loadClientByClientId 
		method -->

	<bean id="clientDetails"
		class="com.afrAsia.authenticate.impl.CustomClientDetailsServiceImpl">
		<property name="oAuthAuthorizationDAO" ref="oAuthAuthorizationDAO" />
		<property name="userDAO" ref="userJpaDAO" />
		<property name="rmDetailsDAO" ref="rmDetailsJpaDAO" />
	</bean>

	<!-- Configure Authentication manager -->
	<bean id="passwordEncoder"
		class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
		<constructor-arg name="strength" value="11" />
	</bean>

	<!-- This class is the custom implementation of UserDetailSerive Interface 
		that provide by the spring, which we Need to implement and override its method. 
		But for Oauth spring provide us , which already implement UserDetailSerive 
		Interface and override its method. -->

	<bean id="clientDetailsUserService"
		class="com.afrAsia.authenticate.impl.CustomClientDetailsUserDetailsServiceImpl">
		<property name="clientDetailsService" ref="clientDetails" />
	</bean>

	<sec:authentication-manager alias="authenticationManager">
		<sec:authentication-provider
			user-service-ref="clientDetailsUserService">
			<sec:password-encoder ref="passwordEncoder" />
		</sec:authentication-provider>
	</sec:authentication-manager>


	<!-- Oauth Token Service Using Database -->
	<!-- The JdbcTokenStore class provide the default implementation from access 
		the token from database. If we want to customize the JDBC implementation 
		we need to implement TokenStore interface and overrider its methods -->
	<bean id="tokenStore"
		class="org.springframework.security.oauth2.provider.token.store.JdbcTokenStore">
		<constructor-arg ref="dataSource" />
	</bean>


	<!-- This the service class which is used to access the function of JdbcTokenStore 
		class. This is like MVC structure JdbcTokenStore is Dao layer and DefaultTokenServices 
		is service layer -->
	<bean id="tokenServices"
		class="com.afrAsia.authenticate.impl.MoveInTokenServices">
		<property name="tokenStore" ref="tokenStore" />
		<property name="supportRefreshToken" value="true" />
		<property name="clientDetailsService" ref="clientDetails" />
		<property name="accessTokenValiditySeconds" value="60" />
	</bean>


	<!-- A user approval handler that remembers approval decisions by consulting 
		existing tokens -->
	<bean id="oAuth2RequestFactory"
		class="org.springframework.security.oauth2.provider.request.DefaultOAuth2RequestFactory">
		<property name="checkUserScopes" value="true" />
		<constructor-arg ref="clientDetails" />
	</bean>


	<bean id="userApprovalHandler"
		class="org.springframework.security.oauth2.provider.approval.TokenStoreUserApprovalHandler">
		<property name="requestFactory" ref="oAuth2RequestFactory" />
		<property name="tokenStore" ref="tokenStore" />
	</bean>


	<!-- Authorization Server Configuration of the server is used to provide 
		implementations of the client details service and token services and to enable 
		or disable certain aspects of the mechanism globally. -->
	<oauth:authorization-server
		client-details-service-ref="clientDetails" token-services-ref="tokenServices"
		user-approval-handler-ref="userApprovalHandler">
		<oauth:authorization-code />
		<oauth:implicit />
		<oauth:refresh-token />
		<oauth:client-credentials />
		<oauth:password authentication-manager-ref="authenticationManager" />
	</oauth:authorization-server>


	<!-- A Resource Server serves resources that are protected by the OAuth2 
		token. Spring OAuth provides a Spring Security authentication filter that 
		implements this protection. -->
	<oauth:resource-server id="resourceServerFilter"
		token-services-ref="tokenServices" resource-id="rest_api" entry-point-ref="oauthAuthenticationEntryPoint"/>
		
		
		<!-- Grants 
		access if only grant (or abstain) votes were received. We can protect REST 
		resource methods with JSR-250 annotations such as @RolesAllowed -->


	<!-- <bean id="roleHierarchy" -->
	<!-- class="org.springframework.security.access.hierarchicalroles.RoleHierarchyImpl"> -->
	<!-- <property name="hierarchy"> -->
	<!-- <value> -->
	<!-- ROLE_ADMIN > ROLE_USER -->
	<!-- ROLE_USER > ROLE_GUEST -->
	<!-- </value> -->
	<!-- </property> -->
	<!-- </bean> -->

	<bean id="roleVoter"
		class="org.springframework.security.access.annotation.Jsr250Voter" />

	<bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased">
		<constructor-arg ref="roleVoter" />
		<!-- <property name="decisionVoters"> -->
		<!-- <list> -->
		<!-- <bean class="org.springframework.security.access.annotation.Jsr250Voter" 
			/> -->
		<!-- </list> -->
		<!-- </property> -->
	</bean>


	<!-- If authentication fails and the caller has asked for a specific content 
		type response, this entry point can send one, along with a standard 401 status -->
	 <!-- <bean id="clientAuthenticationEntryPoint"
		class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<property name="realmName" value="Authorization/client" />
		<property name="typeName" value="Basic" />
		<property name="exceptionRenderer" ref="customOAuth2ExceptionRenderer" />
	</bean> 
	
	<bean id="oauthAuthenticationEntryPoint"
		class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<property name="realmName" value="Authorization" />
		<property name="exceptionRenderer" ref="customOAuth2ExceptionRenderer" />
	</bean>  -->
	
	
	
	
	<bean id="clientAuthenticationEntryPoint"
		class="com.afrAsia.authenticate.impl.CustomOAuth2AuthenticationEntryPoint">
		<property name="realmName" value="Authorization/client" />
		<property name="typeName" value="Basic" />
		<property name="customOAuth2ExceptionRenderer" ref="customOAuth2ExceptionRenderer" />
	</bean>


	<bean id="oauthAuthenticationEntryPoint"
		class="com.afrAsia.authenticate.impl.CustomOAuth2AuthenticationEntryPoint">
		<property name="realmName" value="Authorization" />
		<property name="typeName" value="oauth"/>
		<property name="customOAuth2ExceptionRenderer" ref="customOAuth2ExceptionRenderer" />
	</bean>  

	<!--<bean id="oauthAccessDeniedHandler" class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" 
		/> -->


	<bean id="oauthAccessDeniedHandler"
		class="com.afrAsia.authenticate.impl.CustomOAuth2AccessDeniedHandler">
		<property name="customOAuth2ExceptionRenderer" ref="customOAuth2ExceptionRenderer" />
	</bean>



	<!-- Allows clients to authenticate using request parameters if included 
		as a security filter. It is recommended by the specification that you permit 
		HTTP basic authentication for clients, and not use this filter at all. -->
	<bean id="clientCredentialsTokenEndpointFilter"
		class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
		<property name="authenticationManager" ref="authenticationManager" />
	</bean>


	<bean id="oAuth2ClientContextFilter"
		class="org.springframework.security.oauth2.client.filter.OAuth2ClientContextFilter">
	</bean>

	<oauth:expression-handler id="oauthExpressionHandler" />
	<oauth:web-expression-handler id="oauthWebExpressionHandler" />


	<sec:global-method-security
		pre-post-annotations="enabled" proxy-target-class="true"><!--you could also wire 
			in the expression handler up at the layer of the http filters. See https://jira.springsource.org/browse/SEC-1452 -->
		<sec:expression-handler ref="oauthExpressionHandler" />
	</sec:global-method-security>


	<sec:http pattern="/oauth/token" create-session="stateless"
		authentication-manager-ref="authenticationManager">
		<sec:intercept-url pattern="/oauth/token"
			access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<sec:http-basic entry-point-ref="clientAuthenticationEntryPoint" />
		<sec:custom-filter ref="clientCredentialsTokenEndpointFilter"
			before="BASIC_AUTH_FILTER" />
		<sec:custom-filter ref="oAuth2ClientContextFilter"
			after="EXCEPTION_TRANSLATION_FILTER" />
		<sec:access-denied-handler ref="oauthAccessDeniedHandler" />
	</sec:http>
	
	<!--  <sec:http pattern="/**/request_otp" create-session="stateless"
		authentication-manager-ref="authenticationManager">
		<sec:intercept-url pattern="/**/request_otp"
			access="IS_AUTHENTICATED_ANONYMOUSLY" method="POST" />
		<sec:http-basic entry-point-ref="clientAuthenticationEntryPoint" />
		<sec:custom-filter ref="clientCredentialsTokenEndpointFilter"
			before="BASIC_AUTH_FILTER" />
		<sec:custom-filter ref="oAuth2ClientContextFilter"
			after="EXCEPTION_TRANSLATION_FILTER " />
		<sec:access-denied-handler ref="oauthAccessDeniedHandler" />
	</sec:http>-->
	
	<!-- <sec:http pattern="/**/sign_in" create-session="stateless"
		authentication-manager-ref="authenticationManager">
		<sec:intercept-url pattern="/**/sign_in"
			access="IS_AUTHENTICATED_ANONYMOUSLY" method="POST" />
		<sec:http-basic entry-point-ref="clientAuthenticationEntryPoint" />
		<sec:custom-filter ref="clientCredentialsTokenEndpointFilter"
			before="BASIC_AUTH_FILTER" />
		<sec:custom-filter ref="oAuth2ClientContextFilter"
			after="EXCEPTION_TRANSLATION_FILTER " />
		<sec:access-denied-handler ref="oauthAccessDeniedHandler" />
	</sec:http>  -->
	
	<!-- <sec:http pattern="/**/add_user_admin_role" create-session="stateless"
		authentication-manager-ref="authenticationManager">
		<sec:intercept-url pattern="/admin/add_user_admin_role"
			access="IS_AUTHENTICATED_ANONYMOUSLY" method="GET" />
		<sec:http-basic entry-point-ref="clientAuthenticationEntryPoint" />
		<sec:custom-filter ref="clientCredentialsTokenEndpointFilter"
			before="BASIC_AUTH_FILTER" />
		<sec:custom-filter ref="oAuth2ClientContextFilter"
			after="EXCEPTION_TRANSLATION_FILTER " />
		<sec:access-denied-handler ref="oauthAccessDeniedHandler" />
	</sec:http> -->
	
	<sec:http pattern="/v*/login" security="none"></sec:http>
		
	<!-- sec:http pattern="/v*/sign_in" security="none"></sec:http>

	<sec:http pattern="/**/add_user_admin_role" security="none"></sec:http>
	
	<sec:http pattern="/v*/accounts/count" security="none"></sec:http>
		
	<sec:http pattern="/v*/property_listings/count" security="none"></sec:http-->
		
	<sec:http pattern="/**" create-session="never"
		authentication-manager-ref="authenticationManager">
		<sec:anonymous enabled="false" />
		<sec:intercept-url pattern="/v*/**" access="ROLE_USER,ROLE_ADMIN" />
		<sec:intercept-url pattern="/admin/**" access="ROLE_ADMIN" />
		<sec:custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" /> 
		<sec:http-basic entry-point-ref="oauthAuthenticationEntryPoint" />
		<sec:access-denied-handler ref="oauthAccessDeniedHandler" />
	</sec:http>

	<bean id="customOAuth2ExceptionRenderer" class="com.afrAsia.authenticate.impl.CustomOAuth2ExceptionRenderer" />

	<ldap:context-source
          url="#{ldapProperties[ldapUrl]}"
          base="#{ldapProperties[dnBase]}"
          username="#{ldapProperties[username]}"
          password="#{ldapProperties[password]}" />

   <ldap:ldap-template id="ldapTemplate" />

   <bean id="personRepo" class="com.afrAsia.authenticate.ldap.PersonRepoImpl">
      <property name="ldapTemplate" ref="ldapTemplate" />
   </bean>
</beans>